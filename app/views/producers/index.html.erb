<h1>Producers</h1>

<%= link_to "create producer", new_producer_path %>
<ul>
  <% @producers.each do |producer| %>
    <div class="row">
      <div class="col-xs-12 col-sm-6 col-md-4" >
        <div class="producer-card">
          <a href="#">
            <div class="producer-card-img" style="">
              <ul class="producer-awards list-unstyled list-inline">
                <li><%= image_tag('gold_medal.png', class: "award-lg") %></li>
                <li><%= image_tag('silver_medal.png', class: "award-lg") %></li>
                <li><%= image_tag('bronze_medal.png', class: "award-lg") %></li>
              </ul>
              <div class="producer-avatar">

              </div>
            </div>
            <div class="producer-card-body">
              <div class="producer-card-infos">
                <h4>Category</h4>
                <p><%= producer.address%></p>
                <li><%= link_to producer.name, producer_path(producer) %>
                  <%= link_to "edit", edit_producer_path(producer) %>
                  <%= link_to "destroy", producer_path(producer), method: :delete %></li>
              </div>
              <div class="producer-card-location">
                <span><%= icon('car') %></span>
              </div>
            </div>
          </a>
        </div>
      </div>
    </div>
  <% end %>
</ul>

<div id="map" style="width: 100%; height: 300px;"></div>

<% content_for(:after_js) do %>
  <script>
    $(document).ready(function() {

      // MAP DISPLAY
      // var handler = Gmaps.build('Google');
      // handler.buildMap({ internal: { id: 'map' } }, function() {
      //   markers = handler.addMarkers(<%= raw @hash.to_json %>);
      //   handler.bounds.extendWith(markers);
      //   handler.fitMapToBounds();
      //   if (markers.length == 0) {
      //     handler.getMap().setZoom(2);
      //   } else if (markers.length == 1) {
      //     handler.getMap().setZoom(14);
      //   }
      // });

      // CURRENT USER NAVIGATOR GEOLOCATION
      <% if params[:latitude].blank? && params[:location].blank? %>

      //Options for geolocation : accuracy = position calculation accuracy, request timeout delay, maximumAge : maximum age of cache position
        var options = {
          enableHighAccuracy: true,
          timeout: 5000,
          maximumAge: 0
        };

        // success function for geolocation
        function success(pos) {
          var latitude = pos.coords.latitude
          var longitude = pos.coords.longitude
          console.log('<%= producers_path %>?latitude='+latitude+'&longitude='+longitude)
          window.location.href = '<%= producers_path %>?latitude='+latitude+'&longitude='+longitude;
          // Latitude @ Longitude sent to URL via line above. These can be hidden from URL via AJAX request below (uncomment applicable option) :
          // $.ajax({
          //   type: 'GET',
          //   url: 'http://localhost:3000/producers?latitude='+latitude+'&longitude='+longitude,
          //   success: function(response) {
          //     // console.log('<%= producers_path %>?latitude='+latitude+'&longitude='+longitude)
          //   }
          // });
        };

        // ERROR MANAGEMENT
        function error(error) {
          console.warn(`ERROR(${error.code}): ${error.message}`);
          <% if @location.blank? %>
            var alternative_location = prompt("Geolocation failed, may you indicate your current location (eg. city) ?")
            window.location.href = '<%= producers_path %>?location='+alternative_location;
          <% else %>
            var alternative_location = "<%= @location %>"
            window.location.href = '<%= producers_path %>?location='+alternative_location;
          <% end %>

          // MORE ERRORS MANAGEMENT BELOW :
          // if (error.code ==  error.PERMISSION_DENIED) {
          //   var alternative_location = prompt("Location access denied, may you indicate your current location (eg. city) ?");
          // }
          // if (error.code == error.POSITION_UNAVAILABLE) {
          //   var alternative_location = prompt("Your position in unavailable, may you indicate it (eg. city)?");
          // }
          // if (error.code == error.TIMEOUT) {
          //   var alternative_location = prompt("Geolocation process timed out, may you indicate your current location (eg. city) ?");
          // }
          // if (error.code == error.UNKNOWN_ERROR) {
          //   var alternative_location = prompt("An unknown error occurred, may you indicate your current location (eg. city) ?");
          // }

        };
        navigator.geolocation.getCurrentPosition(success, error, options);

      <% end %>

      //CALCULATE DRIVING TIME TO PRODUCERS
       <% unless params[:latitude].blank? && params[:location].blank? %>

        // Puts producer coords in an array of string for Googlemaps Distance Matrix API :
        <% destinations_producers = @producers.map do |producer| %>
         <% "#{producer.latitude}, #{producer.longitude}" %>
        <% end %>

        // Puts user coords in an array of string for Googlemaps Distance Matrix API (if lat/lon unavailable, use location) :
        <% if params[:latitude].blank? %>
          <% origin_ruby = ["#{params[:location]}"] %>
        <% else %>
          <% origin_ruby = ["#{params[:latitude]}, #{params[:longitude]}"] %>
        <% end %>

        // Puts user coords in an array of string for Googlemaps Distance Matrix API (if loc unavailable, use ip) :
        <% if params[:location] == "null" %>
          <% request.ip == "127.0.0.1" ? ip = "80.214.144.229" : ip = request.ip %>
          <% latitude = Geocoder.search(ip)[0].data["latitude"].to_s %>
          <% longitude = Geocoder.search(ip)[0].data["longitude"].to_s %>
          <% origin_ruby = [latitude + ", " + longitude] %>
        <% end %>

        // REQUEST TO GOOGLE API with origin, destinations and options, DOM modified in callback function
        var service = new google.maps.DistanceMatrixService();
        service.getDistanceMatrix(
          {
            origins: <%= raw origin_ruby %>,
            destinations: <%= raw destinations_producers %>,
            travelMode: 'DRIVING',
            avoidHighways: false,
            avoidTolls: false,
          }, callback);

        function callback(response, status) {
          if (status == 'OK') {
            var origin = response.originAddresses[0];
            var destinations = response.destinationAddresses;
            var results = response.rows[0].elements;

            for (var i = 0; i < results.length; i++) {
              var element = results[i];
              var duration = element.duration.text;
              $('.producer-card-location').eq(i).append($('<span>').text(duration));
            }
          }
        }
       <% end %>
    });
  </script>
<% end %>
